<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.liyu.mapper.OrderMapper">
  <resultMap id="BaseResultMap" type="cn.liyu.model.Order">
    <!--@mbg.generated-->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="passenger_id" jdbcType="INTEGER" property="passengerId" />
    <result column="crowd_funding_id" jdbcType="INTEGER" property="crowdFundingId" />
    <result column="order_number" jdbcType="VARCHAR" property="orderNumber" />
    <result column="phone_number" jdbcType="VARCHAR" property="phoneNumber" />
    <result column="line_id" jdbcType="INTEGER" property="lineId" />
    <result column="line_name" jdbcType="VARCHAR" property="lineName" />
    <result column="pay_number" jdbcType="VARCHAR" property="payNumber" />
    <result column="trade_no" jdbcType="VARCHAR" property="tradeNo" />
    <result column="pay_money" jdbcType="INTEGER" property="payMoney" />
    <result column="pay_status" jdbcType="SMALLINT" property="payStatus" />
    <result column="pay_time" jdbcType="TIMESTAMP" property="payTime" />
    <result column="remark" jdbcType="LONGVARCHAR" property="remark" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="deleted" jdbcType="TINYINT" property="deleted" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, passenger_id, crowd_funding_id, order_number, phone_number, line_id, line_name, 
    pay_number, trade_no, pay_money, pay_status, pay_time, remark, created_at, updated_at, 
    deleted
  </sql>
  <update id="updateBatch" parameterType="java.util.List">
    <!--@mbg.generated-->
    update order
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="passenger_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=INTEGER} then #{item.passengerId,jdbcType=INTEGER}
        </foreach>
      </trim>
      <trim prefix="crowd_funding_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=INTEGER} then #{item.crowdFundingId,jdbcType=INTEGER}
        </foreach>
      </trim>
      <trim prefix="order_number = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=INTEGER} then #{item.orderNumber,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="phone_number = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=INTEGER} then #{item.phoneNumber,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="line_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=INTEGER} then #{item.lineId,jdbcType=INTEGER}
        </foreach>
      </trim>
      <trim prefix="line_name = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=INTEGER} then #{item.lineName,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="pay_number = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=INTEGER} then #{item.payNumber,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="trade_no = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=INTEGER} then #{item.tradeNo,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="pay_money = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=INTEGER} then #{item.payMoney,jdbcType=INTEGER}
        </foreach>
      </trim>
      <trim prefix="pay_status = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=INTEGER} then #{item.payStatus,jdbcType=SMALLINT}
        </foreach>
      </trim>
      <trim prefix="pay_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=INTEGER} then #{item.payTime,jdbcType=TIMESTAMP}
        </foreach>
      </trim>
      <trim prefix="remark = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=INTEGER} then #{item.remark,jdbcType=LONGVARCHAR}
        </foreach>
      </trim>
      <trim prefix="created_at = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=INTEGER} then #{item.createdAt,jdbcType=TIMESTAMP}
        </foreach>
      </trim>
      <trim prefix="updated_at = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=INTEGER} then #{item.updatedAt,jdbcType=TIMESTAMP}
        </foreach>
      </trim>
      <trim prefix="deleted = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=INTEGER} then #{item.deleted,jdbcType=TINYINT}
        </foreach>
      </trim>
    </trim>
    where id in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.id,jdbcType=INTEGER}
    </foreach>
  </update>
  <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into order
    (passenger_id, crowd_funding_id, order_number, phone_number, line_id, line_name, 
      pay_number, trade_no, pay_money, pay_status, pay_time, remark, created_at, updated_at, 
      deleted)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.passengerId,jdbcType=INTEGER}, #{item.crowdFundingId,jdbcType=INTEGER}, #{item.orderNumber,jdbcType=VARCHAR}, 
        #{item.phoneNumber,jdbcType=VARCHAR}, #{item.lineId,jdbcType=INTEGER}, #{item.lineName,jdbcType=VARCHAR}, 
        #{item.payNumber,jdbcType=VARCHAR}, #{item.tradeNo,jdbcType=VARCHAR}, #{item.payMoney,jdbcType=INTEGER}, 
        #{item.payStatus,jdbcType=SMALLINT}, #{item.payTime,jdbcType=TIMESTAMP}, #{item.remark,jdbcType=LONGVARCHAR}, 
        #{item.createdAt,jdbcType=TIMESTAMP}, #{item.updatedAt,jdbcType=TIMESTAMP}, #{item.deleted,jdbcType=TINYINT}
        )
    </foreach>
  </insert>
  <insert id="insertOrUpdate" keyColumn="id" keyProperty="id" parameterType="cn.liyu.model.Order" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      passenger_id,
      crowd_funding_id,
      order_number,
      phone_number,
      line_id,
      line_name,
      pay_number,
      trade_no,
      pay_money,
      pay_status,
      pay_time,
      remark,
      created_at,
      updated_at,
      deleted,
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      #{passengerId,jdbcType=INTEGER},
      #{crowdFundingId,jdbcType=INTEGER},
      #{orderNumber,jdbcType=VARCHAR},
      #{phoneNumber,jdbcType=VARCHAR},
      #{lineId,jdbcType=INTEGER},
      #{lineName,jdbcType=VARCHAR},
      #{payNumber,jdbcType=VARCHAR},
      #{tradeNo,jdbcType=VARCHAR},
      #{payMoney,jdbcType=INTEGER},
      #{payStatus,jdbcType=SMALLINT},
      #{payTime,jdbcType=TIMESTAMP},
      #{remark,jdbcType=LONGVARCHAR},
      #{createdAt,jdbcType=TIMESTAMP},
      #{updatedAt,jdbcType=TIMESTAMP},
      #{deleted,jdbcType=TINYINT},
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=INTEGER},
      </if>
      passenger_id = #{passengerId,jdbcType=INTEGER},
      crowd_funding_id = #{crowdFundingId,jdbcType=INTEGER},
      order_number = #{orderNumber,jdbcType=VARCHAR},
      phone_number = #{phoneNumber,jdbcType=VARCHAR},
      line_id = #{lineId,jdbcType=INTEGER},
      line_name = #{lineName,jdbcType=VARCHAR},
      pay_number = #{payNumber,jdbcType=VARCHAR},
      trade_no = #{tradeNo,jdbcType=VARCHAR},
      pay_money = #{payMoney,jdbcType=INTEGER},
      pay_status = #{payStatus,jdbcType=SMALLINT},
      pay_time = #{payTime,jdbcType=TIMESTAMP},
      remark = #{remark,jdbcType=LONGVARCHAR},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      deleted = #{deleted,jdbcType=TINYINT},
    </trim>
  </insert>
  <insert id="insertOrUpdateSelective" keyColumn="id" keyProperty="id" parameterType="cn.liyu.model.Order" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="passengerId != null">
        passenger_id,
      </if>
      <if test="crowdFundingId != null">
        crowd_funding_id,
      </if>
      <if test="orderNumber != null">
        order_number,
      </if>
      <if test="phoneNumber != null">
        phone_number,
      </if>
      <if test="lineId != null">
        line_id,
      </if>
      <if test="lineName != null">
        line_name,
      </if>
      <if test="payNumber != null">
        pay_number,
      </if>
      <if test="tradeNo != null">
        trade_no,
      </if>
      <if test="payMoney != null">
        pay_money,
      </if>
      <if test="payStatus != null">
        pay_status,
      </if>
      <if test="payTime != null">
        pay_time,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="passengerId != null">
        #{passengerId,jdbcType=INTEGER},
      </if>
      <if test="crowdFundingId != null">
        #{crowdFundingId,jdbcType=INTEGER},
      </if>
      <if test="orderNumber != null">
        #{orderNumber,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null">
        #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="lineId != null">
        #{lineId,jdbcType=INTEGER},
      </if>
      <if test="lineName != null">
        #{lineName,jdbcType=VARCHAR},
      </if>
      <if test="payNumber != null">
        #{payNumber,jdbcType=VARCHAR},
      </if>
      <if test="tradeNo != null">
        #{tradeNo,jdbcType=VARCHAR},
      </if>
      <if test="payMoney != null">
        #{payMoney,jdbcType=INTEGER},
      </if>
      <if test="payStatus != null">
        #{payStatus,jdbcType=SMALLINT},
      </if>
      <if test="payTime != null">
        #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=LONGVARCHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=TINYINT},
      </if>
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=INTEGER},
      </if>
      <if test="passengerId != null">
        passenger_id = #{passengerId,jdbcType=INTEGER},
      </if>
      <if test="crowdFundingId != null">
        crowd_funding_id = #{crowdFundingId,jdbcType=INTEGER},
      </if>
      <if test="orderNumber != null">
        order_number = #{orderNumber,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null">
        phone_number = #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="lineId != null">
        line_id = #{lineId,jdbcType=INTEGER},
      </if>
      <if test="lineName != null">
        line_name = #{lineName,jdbcType=VARCHAR},
      </if>
      <if test="payNumber != null">
        pay_number = #{payNumber,jdbcType=VARCHAR},
      </if>
      <if test="tradeNo != null">
        trade_no = #{tradeNo,jdbcType=VARCHAR},
      </if>
      <if test="payMoney != null">
        pay_money = #{payMoney,jdbcType=INTEGER},
      </if>
      <if test="payStatus != null">
        pay_status = #{payStatus,jdbcType=SMALLINT},
      </if>
      <if test="payTime != null">
        pay_time = #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=LONGVARCHAR},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        deleted = #{deleted,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
</mapper>